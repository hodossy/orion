---
substitutions:
  device_version: "sonoff_tx_ultimate.1"

  vibra_time: 150ms
  button_on_time: 500ms

  button_brightness: "0.7"
  button_color: "{0,0,100}"

  nightlight_name: Nightlight
  nightlight_active_restore_mode: ALWAYS_ON
  nightlight_brightness: "0.2"
  nightlight_color: "{80,70,0}"

  touch_brightness: "1"
  touch_color: "{0,100,100}"
  touch_effect: "Scan"

  long_press_brightness: "1"
  long_press_color: "{100,0,0}"
  long_press_effect: ""

  multi_touch_brightness: "1"
  multi_touch_color: "{0,0,0}"
  multi_touch_effect: "Rainbow"

  swipe_left_brightness: "1"
  swipe_left_color: "{0,100,0}"
  swipe_left_effect: "Wipe Reverse"

  swipe_right_brightness: "1"
  swipe_right_color: "{100,0,70}"
  swipe_right_effect: "Wipe"

  relay_1_pin: GPIO18
  relay_2_pin: GPIO17
  relay_3_pin: GPIO27
  relay_4_pin: GPIO23

  vibra_motor_pin: GPIO21
  pa_power_pin: GPIO26

  led_pin: GPIO13
  status_led_pin: GPIO33

  uart_tx_pin: GPIO19
  uart_rx_pin: GPIO22

  audio_lrclk_pin: GPIO4
  audio_bclk_pin: GPIO2
  audio_sdata_pin: GPIO15

  touchpanel_power_pin: GPIO5

packages:
  base: !include ../../../common/base.yaml
  time: !include ../../../common/time.yaml
  sun: !include ../../../common/sun.yaml

esp32:
  board: esp32dev

esphome:
  on_boot:
    priority: -100
    then:
      - script.execute: publish_sensors_off
      - script.execute: refresh_nightlight
      - script.execute: refresh_led_default

sun:
  on_sunrise:
    - switch.turn_off: nightlight
  on_sunset:
    - if:
        condition:
          switch.is_on: nightlight_active
        then:
          switch.turn_on: nightlight

time:
  - id: !extend homeassistant_time
    on_time:
      - seconds: 0
        minutes: 30
        hours: 20
        then:
          - if:
              condition:
                switch.is_on: nightlight_active
              then:
                switch.turn_on: nightlight

external_components:
  - source:
      type: git
      url: https://github.com/SmartHome-yourself/sonoff-tx-ultimate-for-esphome
      ref: main
    components: [tx_ultimate_touch]

globals:
  - id: nightlight_color
    type: int [3]
    restore_value: false
    initial_value: ${nightlight_color}
  - id: button_color
    type: int [3]
    restore_value: false
    initial_value: ${button_color}
  - id: long_press_color
    type: int [3]
    restore_value: false
    initial_value: ${long_press_color}
  - id: multi_touch_color
    type: int [3]
    restore_value: false
    initial_value: ${multi_touch_color}
  - id: swipe_left_color
    type: int [3]
    restore_value: false
    initial_value: ${swipe_left_color}
  - id: swipe_right_color
    type: int [3]
    restore_value: false
    initial_value: ${swipe_right_color}
  - id: touch_color
    type: int [3]
    restore_value: false
    initial_value: ${touch_color}

binary_sensor:
  - platform: template
    name: Swipe left
    id: swipe_left
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_left
          state: OFF
      - script.execute: refresh_led_default
  - platform: template
    name: Swipe right
    id: swipe_right
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_right
          state: OFF
      - script.execute: refresh_led_default
  - platform: template
    name: Multi Touch
    id: multi_touch
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF
      - script.execute: refresh_led_default
  - platform: template
    name: Long Press
    id: long_press
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: long_press
          state: OFF
      - script.execute: refresh_led_default

switch:
  - platform: gpio
    id: relay_1
    internal: true
    pin: ${relay_1_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default
  - platform: gpio
    id: relay_2
    internal: true
    pin: ${relay_2_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default
  - platform: gpio
    id: relay_3
    internal: true
    pin: ${relay_3_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default
  - platform: gpio
    id: vibra_motor
    pin: ${vibra_motor_pin}
    name: "${friendly_name} Vibration"
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: ${vibra_time}
      - switch.turn_off: vibra_motor
  - platform: gpio
    id: power_amplifier
    pin: ${pa_power_pin}
    internal: true
    restore_mode: ALWAYS_ON
  - platform: gpio
    id: touch_panel_power
    internal: true
    name: "Touch panel power"
    pin:
      number: ${touchpanel_power_pin}
      inverted: true
    restore_mode: ALWAYS_ON
  - platform: template
    id: nightlight
    internal: true
    optimistic: true
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default
  - platform: template
    name: ${nightlight_name}
    id: nightlight_active
    optimistic: true
    restore_mode: ${nightlight_active_restore_mode}
    on_turn_on:
      then:
        - script.execute: refresh_nightlight
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_nightlight
        - script.execute: refresh_led_default

light:
  - platform: esp32_rmt_led_strip
    name: ${friendly_name} Led
    id: leds
    rgb_order: GRB
    chipset: WS2811
    pin: ${led_pin}
    num_leds: 28
    default_transition_length: 0s
    effects:
      - addressable_rainbow:
          name: "Rainbow"
          speed: 30
          width: 8
      - pulse:
          name: "Pulse"
          transition_length: 1.4s
          update_interval: 1s
    on_turn_off:
      then:
        - script.execute: refresh_led_default
  - platform: partition
    id: leds_button_right
    internal: true
    segments:
      - id: leds
        from: 7
        to: 7
  - platform: partition
    id: leds_button_middle
    internal: true
    segments:
      - id: leds
        from: 9
        to: 9
  - platform: partition
    id: leds_button_left
    internal: true
    segments:
      - id: leds
        from: 11
        to: 11
  - platform: partition
    id: leds_nightlight
    internal: true
    segments:
      - id: leds
        from: 0
        to: 6
      - id: leds
        from: 8
        to: 8
      - id: leds
        from: 10
        to: 10
      - id: leds
        from: 12
        to: 19
      - id: leds
        from: 27
        to: 27
      - id: leds_top
        from: 0
        to: 6
  - platform: partition
    id: leds_top
    internal: true
    segments:
      - id: leds
        from: 20
        to: 26
    effects:
      - addressable_scan:
          name: "Scan"
      - addressable_rainbow:
          name: "Rainbow"
          speed: 10
          width: 20
      - addressable_color_wipe:
          name: "Wipe"
      - addressable_color_wipe:
          name: "Wipe Reverse"
          reverse: true

uart:
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  id: my_uart
  baud_rate: 115200
  data_bits: 8
  stop_bits: 1
  parity: NONE
  debug:
    direction: RX
    dummy_receiver: false
    after:
      timeout: 2s
      bytes: 2048
    sequence:
      - lambda: UARTDebug::log_hex(direction, bytes, ' ');

tx_ultimate_touch:
  id: tx_touch
  uart: my_uart
  on_press:
    - script.execute: led_on_touch
  on_release:
    - script.execute:
        id: handle_release
        pos: !lambda "return touch.x;"
  on_swipe_left:
    - script.execute: led_on_swipe_left
    - switch.turn_on: vibra_motor
    - binary_sensor.template.publish:
        id: swipe_left
        state: ON
  on_swipe_right:
    - script.execute: led_on_swipe_right
    - switch.turn_on: vibra_motor
    - binary_sensor.template.publish:
        id: swipe_right
        state: ON
  on_full_touch_release:
    - script.execute: led_on_full_touch
    - switch.turn_on: vibra_motor
    - binary_sensor.template.publish:
        id: multi_touch
        state: ON
  on_long_touch_release:
    - script.execute: led_on_long_touch
    - switch.turn_on: vibra_motor
    - binary_sensor.template.publish:
        id: long_press
        state: ON

script:
  - id: publish_sensors_off
    mode: restart
    then:
      - binary_sensor.template.publish:
          id: swipe_left
          state: OFF
      - binary_sensor.template.publish:
          id: swipe_right
          state: OFF
      - binary_sensor.template.publish:
          id: long_press
          state: OFF
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF
  - id: refresh_nightlight
    mode: restart
    then:
      - if:
          all:
            - switch.is_on: nightlight_active
            - or:
                - lambda: |+
                    auto time = id(homeassistant_time).now();
                    return time.is_valid() && time.hour > 19 && time.minute > 29;
                - sun.is_below_horizon:
          then:
            - switch.turn_on:
                id: nightlight
          else:
            - switch.turn_off:
                id: nightlight
  - id: refresh_led_default
    mode: restart
    then:
      - light.turn_off: leds_top
      - if:
          condition:
            lambda: "return (${relay_count}>1 && id(relay_1).state);"
          then:
            - script.execute: led_on_button_left
          else:
            - script.execute: led_off_button_left
      - if:
          condition:
            lambda: |-
              return (${relay_count}==3 && id(relay_2).state)
                  || (${relay_count}==1 && id(relay_1).state);
          then:
            - script.execute: led_on_button_middle
          else:
            - script.execute: led_off_button_middle
      - if:
          condition:
            lambda: |-
              return (${relay_count}==2 && id(relay_2).state)
                  || (${relay_count}==3 && id(relay_3).state);
          then:
            - script.execute: led_on_button_right
          else:
            - script.execute: led_off_button_right
      - if:
          condition:
            lambda: "return id(nightlight).state;"
          then:
            - script.execute: led_on_nightlight
          else:
            - light.turn_off: leds_nightlight
  - id: led_on_button_left
    mode: restart
    then:
      - light.turn_on:
          id: leds_button_left
          brightness: ${button_brightness}
          red: !lambda "return id(button_color)[0]/100.0;"
          green: !lambda "return id(button_color)[1]/100.0;"
          blue: !lambda "return id(button_color)[2]/100.0;"
  - id: led_on_button_middle
    mode: restart
    then:
      - light.turn_on:
          id: leds_button_middle
          brightness: ${button_brightness}
          red: !lambda "return id(button_color)[0]/100.0;"
          green: !lambda "return id(button_color)[1]/100.0;"
          blue: !lambda "return id(button_color)[2]/100.0;"
  - id: led_on_button_right
    mode: restart
    then:
      - light.turn_on:
          id: leds_button_right
          brightness: ${button_brightness}
          red: !lambda "return id(button_color)[0]/100.0;"
          green: !lambda "return id(button_color)[1]/100.0;"
          blue: !lambda "return id(button_color)[2]/100.0;"
  - id: led_off_button_left
    mode: restart
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state;"
          then:
            - light.turn_on:
                id: leds_button_left
                brightness: ${nightlight_brightness}
                red: !lambda "return id(nightlight_color)[0]/100.0;"
                green: !lambda "return id(nightlight_color)[1]/100.0;"
                blue: !lambda "return id(nightlight_color)[2]/100.0;"
          else:
            - light.turn_off:
                id: leds_button_left
  - id: led_off_button_middle
    mode: restart
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state;"
          then:
            - light.turn_on:
                id: leds_button_middle
                brightness: ${nightlight_brightness}
                red: !lambda "return id(nightlight_color)[0]/100.0;"
                green: !lambda "return id(nightlight_color)[1]/100.0;"
                blue: !lambda "return id(nightlight_color)[2]/100.0;"
          else:
            - light.turn_off:
                id: leds_button_middle
  - id: led_off_button_right
    mode: restart
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state;"
          then:
            - light.turn_on:
                id: leds_button_right
                brightness: ${nightlight_brightness}
                red: !lambda "return id(nightlight_color)[0]/100.0;"
                green: !lambda "return id(nightlight_color)[1]/100.0;"
                blue: !lambda "return id(nightlight_color)[2]/100.0;"
          else:
            - light.turn_off:
                id: leds_button_right
  - id: led_on_nightlight
    mode: restart
    then:
      - light.turn_on:
          id: leds_nightlight
          brightness: ${nightlight_brightness}
          red: !lambda "return id(nightlight_color)[0]/100.0;"
          green: !lambda "return id(nightlight_color)[1]/100.0;"
          blue: !lambda "return id(nightlight_color)[2]/100.0;"
  - id: led_on_release
    mode: restart
    then:
      - light.turn_off:
          id: leds_top
  - id: led_on_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${touch_brightness}
          red: !lambda "return id(touch_color)[0]/100.0;"
          green: !lambda "return id(touch_color)[1]/100.0;"
          blue: !lambda "return id(touch_color)[2]/100.0;"
          effect: ${touch_effect}
      - delay: 6s
      - script.execute: refresh_led_default
  - id: led_on_swipe_left
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${swipe_left_brightness}
          red: !lambda "return id(swipe_left_color)[0]/100.0;"
          green: !lambda "return id(swipe_left_color)[1]/100.0;"
          blue: !lambda "return id(swipe_left_color)[2]/100.0;"
          effect: ${swipe_left_effect}
  - id: led_on_swipe_right
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${swipe_right_brightness}
          red: !lambda "return id(swipe_right_color)[0]/100.0;"
          green: !lambda "return id(swipe_right_color)[1]/100.0;"
          blue: !lambda "return id(swipe_right_color)[2]/100.0;"
          effect: ${swipe_right_effect}
  - id: led_on_full_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${multi_touch_brightness}
          red: !lambda "return id(multi_touch_color)[0]/100.0;"
          green: !lambda "return id(multi_touch_color)[1]/100.0;"
          blue: !lambda "return id(multi_touch_color)[2]/100.0;"
          effect: ${multi_touch_effect}
  - id: led_on_long_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${long_press_brightness}
          red: !lambda "return id(long_press_color)[0]/100.0;"
          green: !lambda "return id(long_press_color)[1]/100.0;"
          blue: !lambda "return id(long_press_color)[2]/100.0;"
          effect: ${long_press_effect}
